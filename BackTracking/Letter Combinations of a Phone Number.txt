Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.

------------------------------------------------------------------------------------------------------------------------------

class Solution {
    String[] map = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    List<String> list=new ArrayList<>();
    
    public List<String> letterCombinations(String digits) {
        
        if(digits.length()==0)
            return list;
        
        dfs(digits,0,new StringBuilder(""));
        
        return list;
        
    }
    
    public void dfs(String digits,int idx,StringBuilder sb)
    {
        if(digits.length()==sb.length())
        {
            list.add(sb.toString());
            return;
        }
        
        for(char c:map[digits.charAt(idx)-'0'].toCharArray())
        {
            sb.append(c);
            dfs(digits,idx+1,sb);
            sb.deleteCharAt(sb.length()-1);
        }
        
        
    }
}