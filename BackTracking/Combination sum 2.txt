Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]



class Solution {
    List<List<Integer>> parent=new ArrayList<>();
    //Set<List<Integer>> set=new HashSet<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        
        Arrays.sort(candidates);//To handle duplicates
        
        getComb(candidates,target,new ArrayList<Integer>(),0);
        
        return parent;
    }
    
    public void getComb(int[] candidates,int target,List<Integer> list,int idx){
        
         if(target<=0){
            if(target==0)
            {  
              if(!parent.contains(list))parent.add(new ArrayList<>(list));//remove duplicates
            }
            return;
        }
        
        for(int i=idx;i<candidates.length;i++){
            list.add(candidates[i]);
            getComb(candidates,target-candidates[i],list,i+1);
            list.remove(list.size()-1);
        }
        
        return;
    }
}