Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

--------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    
    List<List<Integer>> parent=new ArrayList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        
        int[] arr=new int[9];
        
        for(int i=0;i<9;i++)
            arr[i]=i+1;
        
        getComb(arr,0,new ArrayList<>(),k,n);
        
        return parent;
        
    }
    public void getComb(int[] arr,int idx,List<Integer> list,int k,int n)
    {
        if(list.size()==k && n<=0)
        {
            if(n==0)
                parent.add(new ArrayList<>(list));
            
            return;
        }
        
        for(int i=idx;i<arr.length;i++)
        {
            list.add(arr[i]);
            getComb(arr,i+1,list,k,n-arr[i]);
            list.remove(list.size()-1);
        }
    }
    
}