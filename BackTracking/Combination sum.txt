Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

-----------------------------------------------------------------------------------------
solution 1

class Solution {
    List<List<Integer>> parent=new ArrayList<>();
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        
        int i=0;
        
        Helper(candidates,target,i,new ArrayList<Integer>());
        
        return parent;
    }
    
    public void Helper(int[] arr,int target,int i,List<Integer> child){
        if(i>=arr.length) return;
        
        if(target<=0){
            if(target==0)
                parent.add(new ArrayList<Integer>(child) );
            return;
        }
              
        if(target-arr[i]>=0)
        {
            child.add(arr[i]);
            Helper(arr,target-arr[i],i,child);
            child.remove(child.size()-1);
        }
        Helper(arr,target,i+1,child);
    }
}




--------------------------------------------------------------------------------------------------------



solution 2



class Solution {
    List<List<Integer>> parent=new ArrayList<>();
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        
        int i=0;
        
        Helper(candidates,target,i,new ArrayList<Integer>());
        
        return parent;
    }
    
    public void Helper(int[] arr,int target,int idx,List<Integer> child){
        if(idx>=arr.length) return;
        
        if(target<=0){
            if(target==0)
                parent.add(new ArrayList<Integer>(child) );
            return;
        }
              
       for(int i=idx;i<arr.length;i++){           
           child.add(arr[i]);
           Helper(arr,target-arr[i],i,child);
           child.remove(child.size()-1);
           
       }
    }
}