You have a set of tiles, where each tile has one letter tiles[i] printed on it.  Return the number of possible non-empty sequences of letters you can make.

 

Example 1:

Input: "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: "AAABBC"
Output: 188

------------------------------------------------------------------------------------------------------------------------------

class Solution {
    HashSet<String> set=new HashSet<>();
    public int numTilePossibilities(String tiles) {
       int visited[]=new int[tiles.length()];
      
        Helper(tiles,new StringBuilder(""),visited);
        
        return set.size();
    }
    
    public void Helper(String tiles,StringBuilder sb,int[] visited)
    {
        if(sb.length()>0 && !set.contains(sb.toString()))
            set.add(sb.toString());
        
        for(int i=0;i<tiles.length();i++)
        {
            if(visited[i]==0)
            {
                visited[i]=1;
                sb.append(tiles.charAt(i));
                Helper(tiles,sb,visited);
                visited[i]=0;
                sb.deleteCharAt(sb.length()-1);
            }
        }
    }
}