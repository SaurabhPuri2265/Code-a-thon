//Recursive

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> l=new ArrayList<>();
        if(root==null)
            return l;
        InOrder(root,l);
        return l;
        
    }
    
    public void InOrder(TreeNode root,List<Integer> l)
    {
        
        if(root.left!=null)
            InOrder(root.left,l);
        if(root==null)
        {
            l.add(null);
            return;
        }
        l.add(root.val);
        if(root.right!=null)
            InOrder(root.right,l);
    }
}

--------------------------------------------------------------------------------------------------------------------------

//Iterative

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> s=new Stack<>();
        List<Integer> list=new ArrayList<>();
        
        if(root==null)
            return list;
        
        TreeNode curr=root;
        
        while(curr!=null || s.size()!=0)
        {
            while(curr!=null)
            {
                s.push(curr);
                curr=curr.left;
            }
            curr=s.pop();
            list.add(curr.val);
            curr=curr.right;
        }
      return list;  
        
    }
}