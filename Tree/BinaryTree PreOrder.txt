//Recursive

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> l=new ArrayList<>();
        if(root==null)
            return l;
        PreOrder(root,l);
        return l;
        
    }
    
    public void PreOrder(TreeNode root,List<Integer> l)
    {
        if(root==null)
        {
            l.add(null);
            return;
        }
        l.add(root.val);
        if(root.left!=null)
            PreOrder(root.left,l);
        if(root.right!=null)
            PreOrder(root.right,l);
    }
}

//Iterative

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> s=new Stack<>();
        List<Integer> l=new ArrayList<>();
        
        if(root==null)
            return l;
        
        s.push(root);
        TreeNode temp;
        while(!s.isEmpty())
        {
            temp=s.pop();
            l.add(temp.val);
            
            if(temp.right!=null)
                s.push(temp.right);
            if(temp.left!=null)
                s.push(temp.left); 
            
        }
        return l;
    }
}