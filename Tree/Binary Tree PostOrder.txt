//Recursive

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        
        List<Integer> l=new ArrayList<>();
        if(root==null)
            return l;
        PostOrder(root,l);
        
        return l;
    }
    
    public void PostOrder(TreeNode root,List<Integer> l)
    {
        if(root==null)
        {
            l.add(null);
            return;
        }
        if(root.left!=null)
            PostOrder(root.left,l);
        if(root.right!=null)
            PostOrder(root.right,l);
        
        l.add(root.val);
    }
}


//Iterative

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> s=new Stack<>();
        List<Integer> l=new ArrayList<>();
        if(root==null)
            return l;
        boolean flag=true;
        while(flag)
        {
            while(root!=null)
            {
                s.push(root);
                s.push(root);
                root=root.left;
            }
            
            if(s.isEmpty())
                    break;   
            
            root=s.pop();
            
            if(!s.isEmpty() && root==s.peek())
                root=root.right;
            else
            {
                                
                if(root!=null)
                    l.add(root.val);
                    
                root=null;
            }                              
        }
    return l;
      
    }
}