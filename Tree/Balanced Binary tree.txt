Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        return helper(root).balanced;  
    }
    
    public Pair helper(TreeNode root){
        if(root==null)
            return new Pair(0,true);
        
        Pair lh=helper(root.left);
         Pair rh=helper(root.right);
        
        if((Math.abs(lh.height-rh.height)<2) && lh.balanced==true && rh.balanced==true)
            return new Pair(Math.max(lh.height,rh.height)+1,true);
        return new Pair(Math.max(lh.height,rh.height)+1,false);
    }
    
    class Pair{
        int height;
        boolean balanced;
        Pair(int height,boolean balanced)
        {
            this.height=height;
            this.balanced=balanced;
        }
    }
}