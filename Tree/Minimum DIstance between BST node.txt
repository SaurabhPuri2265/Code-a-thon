Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.

Example :

Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.

The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDiffInBST(TreeNode root) {
        List<Integer> l=new ArrayList<>();
        
        Helper(root,l);
        
        int i=1,min=Integer.MAX_VALUE;
        
        while(i<l.size())
        {
            if(min>Math.abs(l.get(i)-l.get(i-1)))
                min=Math.abs(l.get(i)-l.get(i-1));
            i++;
        }
        return min;
    }
    
    public void Helper(TreeNode root,List<Integer> l)
    {
        if(root!=null)
        {
            
            Helper(root.left,l);
            l.add(root.val);
            Helper(root.right,l);
        }
    }
}