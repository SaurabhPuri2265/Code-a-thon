Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:

Each of the array element will not exceed 100.
The array size will not exceed 200.
 

Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].


class Solution {
    public boolean canPartition(int[] nums) {
        int sum=Arrays.stream(nums).sum();
        
        if(sum%2!=0)return false;
        
        int half=sum/2;
        boolean subset[][] = 
					new boolean[nums.length+1][half+1];
        
        for(int i=1;i<=half;i++)
            subset[0][i]=false;
        for(int i=0;i<=nums.length;i++)
            subset[i][0]=true;
        
        for(int i=1;i<=nums.length;i++)
            for(int j=1;j<=half;j++)
            {
                if(nums[i-1]>j)
                    subset[i][j]=subset[i-1][j];
                else
                    subset[i][j]=subset[i-1][j] || subset[i-1][j-nums[i-1]];
            }
        return subset[nums.length][half];
    }
}