You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.

---------------------------------------------------------------------------------------------------------------------------

public class Solution {
    int count = 0;
    public int findTargetSumWays(int[] nums, int S) {
        
        int dp[][]=new int[nums.length][2001];
        
        for (int[] row: dp)
            Arrays.fill(row, Integer.MIN_VALUE);
        
        calculate(nums, 0, 0, S,dp);
        
        return calculate(nums,0,0,S,dp);
    }
    public int calculate(int[] nums, int i, int sum, int S,int[][] dp) {
        if (i == nums.length) {
            {
                if(sum==S)
                    return 1;
                else
                    return 0;
            }
        } else {
             if (dp[i][sum + 1000] != Integer.MIN_VALUE) 
                return dp[i][sum + 1000];
            
            int add=calculate(nums, i + 1, sum + nums[i], S, dp);
            int sub=calculate(nums, i + 1, sum - nums[i], S, dp);
                 
            dp[i][sum+1000]=add+sub;
                 
            return dp[i][sum + 1000];     
        }
    }
}