Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head==null || head.next==null)
            return head;
        
        ListNode curr=head;
        int length=0;
        
        
        
        while(curr!=null)
        {
            length++;
            curr=curr.next;
        }
        System.out.println(length);
        
       return getList(head,k,length); 
    }
    
    public ListNode getList(ListNode head,int k,int length){
        
       if(length-k>=0) 
       {
        ListNode curr=head;
        ListNode prev=null;
        ListNode temp=null;
        
        int count=1;
        
        while(curr!=null && count<=k){
            temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
            count++;
        }
        
        if(temp!=null)
            head.next=getList(temp,k,length-k);
        
        return prev;

       }
      return head; 
    }
}