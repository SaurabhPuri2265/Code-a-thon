Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

----------------------------------------------------------------------------------------------------


class Solution {
    public int search(int[] nums, int target) {
        
        return getIndex(nums,0,nums.length-1,target);
        
    }
    
    public int getIndex(int[] nums,int i,int j,int target)
    {
        if(i>j)
            return -1;
        
        int mid=(i+j)/2;
        
        System.out.println(mid);
        
        if(nums[mid]==target)
            return mid;
        else if(nums[mid]>=nums[i])
        {
            if(nums[mid]>=target && nums[i]<=target )
                return getIndex(nums,i,mid-1,target);
            else
                return getIndex(nums,mid+1,j,target);
        }
                
        else {
            
            if(nums[mid]<=target && nums[j]>=target )
                return getIndex(nums,mid+1,j,target);
            else
                return getIndex(nums,i,mid-1,target);
        }
    }
}