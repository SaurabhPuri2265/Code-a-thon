Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        
        PriorityQueue<Pair> q=new PriorityQueue<>(k,new Comparator<Pair>(){
            public int compare(Pair a,Pair b){
                return b.freq-a.freq;
            }
        });
        
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            if(!map.containsKey(nums[i]))
                map.put(nums[i],1);
            else{
                int val=map.get(nums[i]);
                map.put(nums[i],val+1);
            }
        }
        for(Map.Entry  e: map.entrySet()){
            int el=(int)e.getKey();
            int val=(int)e.getValue();
            q.add(new Pair(el,val));
        }
        
        int[] arr=new int[k];
        
        k=0;
        
        System.out.println(q.size());
        
        while(q.size()>0 && k<arr.length){
            Pair el=q.remove();
            arr[k++]=el.key;
        }
        
        
        return arr;

    }
    
    class Pair{
        int key;
        int freq;
        Pair(int key,int freq){
            this.key=key;
            this.freq=freq;
        }
    }
}