Given a queue of integers of even length, rearrange the elements by interleaving the first half of the queue with the second half of the queue.
Only a stack can be used as an auxiliary space.

Examples:
Input :  1 2 3 4
Output : 1 3 2 4

Input : 11 12 13 14 15 16 17 18 19 20
Output : 11 16 12 17 13 18 14 19 15 20


package interleavequeue;

import java.util.*;

public class InterleaveQueue {
    
    static void Interleave(Queue<Integer> q)
    {
        Stack<Integer> s=new Stack<>();
        int half=q.size()/2;
        
        for(int i=0;i<half;i++) // add half of list to stack
            s.push(q.remove());
        
        while(!s.isEmpty())
            q.add(s.pop()); // adding pushed elements to queue
        
        for(int i=0;i<half;i++)
            q.add(q.remove()); //dequeuing and enqueuing first half of queue
        
        for(int i=0;i<half;i++) // add half of list to stack
            s.push(q.remove());
        
        while(!s.isEmpty())
        {
            q.add(s.pop());
            q.add(q.remove());
        }
        
        while(!q.isEmpty())
            System.out.println(q.remove());
        
    }
    public static void main(String[] args) {
        // TODO code application logic here
        //InterleaveQueue q=new InterleaveQueue();
         Queue<Integer> q=new LinkedList<>();
         q.add(11); 
        q.add(12); 
        q.add(13); 
        q.add(14); 
        q.add(15); 
        q.add(16); 
        q.add(17); 
        q.add(18); 
        q.add(19); 
        q.add(20); 
        Interleave(q);
        
    }
    
}
