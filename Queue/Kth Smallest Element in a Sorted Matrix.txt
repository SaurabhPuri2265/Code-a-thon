Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

return 13.

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Pair> q=new PriorityQueue<Pair>((n1,n2) -> (n1.el-n2.el));
        int m=matrix.length;
        int n=matrix[0].length;
        
        for(int i=0;i<m;i++)
            q.add(new Pair(matrix[i][0],i,0));
        
        for(int i=0;i<k-1;i++){
            Pair temp=q.remove();
            if(temp.col+1<n)
                q.add(new Pair(matrix[temp.row][temp.col+1],temp.row,temp.col+1));
            System.out.println(q.peek().el);
        }
        
        
        
        return q.remove().el;
        
    }
    class Pair{
        int el;
        int row;
        int col;
        Pair(int el,int row,int col){
            this.el=el;
            this.row=row;
            this.col=col;
        }
    }
}