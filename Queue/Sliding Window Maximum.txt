Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


----------------------------------------------------------------------------------------------------------------------------------------

//Using Dequeue


class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
        Deque<Integer> q=new LinkedList<>();
        int[] res=new int[arr.length-k+1];
        int idx=0;
        for(int i=0;i<k;i++)
        {
            while(!q.isEmpty() && arr[i]>=arr[q.peekLast()])
                q.removeLast();
            q.addLast(i);
        }
        for(int i=k;i<arr.length;i++)
        {
            res[idx++]=arr[q.peek()];
            
            while(!q.isEmpty() && q.peek()<=i-k)
                q.removeFirst();
            while(!q.isEmpty() && arr[i]>=arr[q.peekLast()])
                q.removeLast();
            
            q.addLast(i);
        }
        res[idx++]=arr[q.peek()];
        System.out.println(res);
        return res;
    }
}
