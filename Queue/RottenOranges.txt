Minimum time required to rot all oranges
Given a matrix of dimension m*n where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0: Empty cell

1: Cells have fresh oranges

2: Cells have rotten oranges 
So we have to determine what is the minimum time required so that all the oranges become rotten. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right). If it is impossible to rot every orange then simply return -1.

package rottenoranges;

import java.util.*;
public class RottenOranges {

     public final static int R = 3; 
    public final static int C = 5; 
      
    // structure for storing coordinates of the cell 
    static class Ele 
    { 
        int x = 0; 
        int y = 0; 
        Ele(int x,int y) 
        { 
            this.x = x; 
            this.y = y; 
        } 
    } 
      
    // function to check whether a cell is valid / invalid 
    static boolean isValid(int i, int j) 
    { 
        return (i >= 0 && j >= 0 && i < R && j < C); 
    } 
      
  
    // Function to check whether the cell is delimiter 
    // which is (-1, -1) 
    static boolean isDelim(Ele temp) 
    { 
        return (temp.x == -1 && temp.y == -1); 
    } 
      
    // Function to check whether there is still a fresh 
    // orange remaining 
    static boolean checkAll(int arr[][]) 
    { 
         for (int i=0; i<R; i++) 
               for (int j=0; j<C; j++) 
                  if (arr[i][j] == 1) 
                     return true; 
         return false; 
    } 
    
    static int rotOranges(int arr[][])
    {
         Queue<Ele> q=new LinkedList<>(); 
        Ele temp;  
        int time = 0; 
        boolean flag;
         // Store all the cells having rotten orange in first time frame 
        for (int i=0; i < R; i++) 
           for (int j=0; j < C; j++) 
               if (arr[i][j] == 2) 
                   q.add(new Ele(i,j)); 
                  
        // Separate these rotten oranges from the oranges which will rotten 
        // due the oranges in first time frame using delimiter which is (-1, -1) 
        q.add(new Ele(-1,-1));
        
        while(!q.isEmpty())
        {
            flag=false;
            
            while(!isDelim(q.peek()))
            {
                temp=q.remove();
                if(isValid(temp.x+1,temp.y) && arr[temp.x+1][temp.y]==1)
                {
                    if(!flag)
                    {
                        flag=true;
                        time++;
                    }
                    
                    arr[temp.x+1][temp.y]=2;
                    
                    q.add(new Ele(temp.x+1,temp.y));
                    
                }
                if(isValid(temp.x-1,temp.y) && arr[temp.x-1][temp.y]==1)
                {
                    if(!flag)
                    {
                        flag=true;
                        time++;
                    }
                    
                    arr[temp.x-1][temp.y]=2;
                    
                    q.add(new Ele(temp.x-1,temp.y));
                    
                }
                if(isValid(temp.x,temp.y-1) && arr[temp.x][temp.y-1]==1)
                {
                    if(!flag)
                    {
                        flag=true;
                        time++;
                    }
                    
                    arr[temp.x][temp.y-1]=2;
                    
                    q.add(new Ele(temp.x,temp.y-1));
                    
                }
                if(isValid(temp.x,temp.y+1) && arr[temp.x][temp.y+1]==1)
                {
                    if(!flag)
                    {
                        flag=true;
                        time++;
                    }
                    
                    arr[temp.x][temp.y+1]=2;
                    
                    q.add(new Ele(temp.x,temp.y+1));
                    
                }
                
            }
            q.remove();
            
            if(!q.isEmpty())
                q.add(new Ele(-1,-1));
            
        }
        if(checkAll(arr))
            return -1;
        return time;
    }
    public static void main(String[] args) {
        // TODO code application logic here
        int arr[][] = { {2, 1, 0, 2, 1}, 
                        {1, 0, 1, 2, 1}, 
                        {1, 0, 0, 2, 1}}; 
        int ans = rotOranges(arr); 
        if(ans == -1) 
            System.out.println("All oranges cannot rot"); 
        else
            System.out.println("Time required for all oranges to rot = " + ans); 
    
    }
    
}
