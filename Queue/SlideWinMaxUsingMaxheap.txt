Given an array and an integer K, find the maximum for each and every contiguous subarray of size k.
Examples :

Input: arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6}, K = 3
Output: 3 3 4 5 5 5 6

Input: arr[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13}, K = 4
Output: 10 10 10 15 15 90 90


package slidingwinmax;
import java.util.*;
public class SlidingWinMax {

    static void WinMax(int[] arr,int k)
    {
        PriorityQueue<Integer> q=new PriorityQueue<>(Collections.reverseOrder());
        if(arr.length==0)
        {
            System.out.println("-1");
            return;
        }
        int temp=arr[0];
        for(int i=0;i<k;i++)
        {
            q.add(arr[i]);
        }
        System.out.println(q.peek());
        for(int i=k;i<arr.length;i++)
        {
            
            q.remove(arr[i-k]);
            q.add(arr[i]);
            System.out.println(q.peek());
        }
        
    }
    public static void main(String[] args) {
        // TODO code application logic here
        int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; 
        int k = 3; 
        WinMax(arr,k);
    }
    
}
