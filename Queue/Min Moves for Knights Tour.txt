Given any source point, (C, D) and destination point, (E, F) on a chess board, we need to find whether Knight can move to the destination or not.
If yes, then what would be the minimum number of steps for the knight to move to the said point.
If knight can not move from the source point to the destination point, then return -1.

Note: A knight cannot go out of the board.



Input Format:

The first argument of input contains an integer A.
The second argument of input contains an integer B.
    => The chessboard is of size A x B.
The third argument of input contains an integer C.
The fourth argument of input contains an integer D.
    => The Knight is initially at position (C, D).
The fifth argument of input contains an integer E.
The sixth argument of input contains an integer F.
    => The Knight wants to reach position (E, F).



public class Solution {
    public int knight(int A, int B, int C, int D, int E, int F) {
        
        boolean[][] vis=new boolean[A][B];
        
        for(int i=0;i<A;i++){
            for(int j=0;j<B;j++){
                vis[i][j]=false;
            }
        }
        
        int dx[] = {-2, -1, 1, 2, -2, -1, 1, 2};  
        int dy[] = {-1, -2, -2, -1, 1, 2, 2, 1};
        
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(C-1,D-1,0));
        vis[C-1][D-1]=true;
        
        while(q.size()>0)
        {
            Pair temp=q.remove();
            
            if(temp.x==(E-1) && temp.y==(F-1)){
                return temp.moves;
            }
            
            for(int k=0;k<8;k++){
                int x=temp.x+dx[k];
                int y=temp.y+dy[k];
                if(isInside(x,y,A,B) && !vis[x][y])
                    {
                        q.add(new Pair(x,y,temp.moves+1));
                        vis[x][y]=true;
                    }
            }
        }
        
        return -1;
    }
    boolean isInside(int x, int y, int A,int B)  
    {  
    if (x >= 0 && x < A && y >= 0 && y < B)  
        return true;  
    return false;  
    } 
    
    class Pair{
        int x;
        int y;
        int moves;
        Pair(int x,int y,int moves){
            this.x=x;
            this.y=y;
            this.moves=moves;
        }
    }
}
