Given an array A of 0s and 1s, we may change up to K values from 0 to 1.

Return the length of the longest (contiguous) subarray that contains only 1s. 

 

Example 1:

Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.
Example 2:

Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
Explanation: 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

---------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int longestOnes(int[] A, int K) {
      int i=0,j=0,count=K,start=0,max=0;
        
        while(j<A.length)
        {
            
            if(A[j]==0)
            {
               if(count>0)
                   count--;
                else
                {
                    count--;
                    while(count<0 && start<=j)
                    {
                        if(A[start]==0)
                            count++;
                        start++;
                    }
                }
                
            }
            max=Math.max(max,j-start+1);
            j++;
        }
        return max;
    }
}