Given an array A of positive integers, call a (contiguous, not necessarily distinct) subarray of A good if the number of different integers in that subarray is exactly K.

(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)

Return the number of good subarrays of A.

 

Example 1:

Input: A = [1,2,1,2,3], K = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].
Example 2:

Input: A = [1,2,1,3,4], K = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int subarraysWithKDistinct(int[] A, int K) {
        return almost(A,K)-almost(A,K-1);
    }
    
    public int almost(int[] A,int K)
    {
        HashMap<Integer,Integer> count=new HashMap<>();
        int start=0;int res=0;
        for(int end=0;end<A.length;end++)
        {
            int c=A[end];
            if(count.getOrDefault(c,0)==0)
                K--;
            
            count.put(c,count.getOrDefault(c,0)+1);
            
            while(K<0 && start<=end)
            {
                count.put(A[start],count.getOrDefault(A[start],0)-1);
                if(count.get(A[start])==0)
                    K++;
                start++;
            }
            
            res+= end-start+1;
        }
        return res;
    }
    
}