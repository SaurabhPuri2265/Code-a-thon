Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made.

It is guaranteed that the answer is unique.

class Solution {
    public String removeDuplicates(String s, int k) {
        
        Stack<Character> st=new Stack<>();
        Stack<Integer> st1=new Stack<>();
        int count=0;
        
        for(char c:s.toCharArray())
        {
            if(!st.isEmpty())
            {
                if(c==st.peek())
                {
                    if(st1.peek()+1==k)
                    {
                        st.pop();
                        st1.pop();
                    }
                    else
                    {
                        count=st1.pop()+1;
                        st1.push(count);
                        count=0;
                    }
                }
                else
                {
                    st.push(c);
                    st1.push(1);
                }
                    
            }
            else
            {
                st.push(c);
                st1.push(1);
            }
        }
         char res; 
        String str="";
        while(!st1.isEmpty())
        {
            count=st1.pop();
            res=st.pop();
            for(int i=1;i<=count;i++)
                str=res+str;
        }
        
        return str;
    }
}