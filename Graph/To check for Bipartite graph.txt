Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.

The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.

Example 1:
Input: [[1,3], [0,2], [1,3], [0,2]]
Output: true
Explanation: 
The graph looks like this:
0----1
|    |
|    |
3----2
We can divide the vertices into two groups: {0, 2} and {1, 3}.


class Solution {
    public boolean isBipartite(int[][] graph) {
        //Using BFS
        Queue<Integer> q=new LinkedList<>();
        
        //Color array for tracing the colors given to nodes
        int[] color=new int[graph.length];
        
        for(int j=0;j<graph.length;j++)
        {
            
            if(color[j]==0){
                color[j]=1; //Giving 1 color to all nodes at first and adding to queue
                q.add(j);
            }
            
            while(!q.isEmpty()){ //check for all adjacent edges
                int node=q.remove();
                for(int i:graph[node]){
                    if(color[i]==color[node]) return false;
                    if(color[i]==0){
                        color[i]-=color[node];
                        q.add(i);
                    }

                }
            }
           
        }
        return true;
    }
}