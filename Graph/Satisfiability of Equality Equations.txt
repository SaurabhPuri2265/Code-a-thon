Given an array equations of strings that represent relationships between variables, each string equations[i] has length 4 and takes one of two different forms: "a==b" or "a!=b".  Here, a and b are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.

 

Example 1:

Input: ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.
Example 2:

Input: ["b==a","a==b"]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.
Example 3:

Input: ["a==b","b==c","a==c"]
Output: true

------------------------------------------------------------------------------------------------------------------------

class Solution {
    public boolean equationsPossible(String[] equations) {
     HashMap<Character,HashSet<Character>> map=new HashMap<>();
        
        for(String s:equations)
        {
            if(s.charAt(1)=='=')
            {
                if(s.charAt(0)==s.charAt(3))continue;
                
                map.putIfAbsent(s.charAt(0), new HashSet<>());
                map.putIfAbsent(s.charAt(3), new HashSet<>());
                map.get(s.charAt(0)).add(s.charAt(3));
                map.get(s.charAt(3)).add(s.charAt(0));
            }
        }
        for(String s:equations)
        {
            if(s.charAt(1)=='!')
            {
                if(s.charAt(0)==s.charAt(3))return false;
                if(!map.containsKey(s.charAt(0)) || !map.containsKey(s.charAt(3)))continue;
                if(canReach(s.charAt(0),s.charAt(3),map,new HashSet<Character>()))return false;
            }
        }

        return true;        
        
    }
    
    public boolean canReach(Character c,Character d,HashMap<Character,HashSet<Character>> map,HashSet<Character> nodes)
    {
        if(c==d)
            return true;
        
        nodes.add(c);
        
        for(char x:map.get(c))
        {
            if(nodes.contains(x))continue;
            if(canReach(x,d,map,nodes))return true;
        }
        return false;
    }
   
}